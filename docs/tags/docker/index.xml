<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on 石记</title>
    <link>https://stoneepigraph.github.io/tags/docker/</link>
    <description>Recent content in Docker on 石记</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 04 Sep 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://stoneepigraph.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker笔记</title>
      <link>https://stoneepigraph.github.io/posts/docker/</link>
      <pubDate>Wed, 04 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://stoneepigraph.github.io/posts/docker/</guid>
      <description>&lt;h2 id=&#34;入门&#34;&gt;入门&lt;/h2&gt;&#xA;&lt;h3 id=&#34;什么是docker&#34;&gt;什么是Docker&lt;/h3&gt;&#xA;&lt;p&gt;docker是一个容器技术。&lt;/p&gt;&#xA;&lt;h3 id=&#34;docker的优势&#34;&gt;Docker的优势&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;一致的运行环境， 更轻松的迁移。&lt;/li&gt;&#xA;&lt;li&gt;对进程进行封装隔离，容器与容器之间互不影响，更高效的利用系统资源。&lt;/li&gt;&#xA;&lt;li&gt;通过镜像复制多个环境一致的容器。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;docker与虚拟机的对比&#34;&gt;Docker与虚拟机的对比&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Docker占用磁盘少&lt;/li&gt;&#xA;&lt;li&gt;Docker的引擎比虚拟机系统占用CPU资源低&lt;/li&gt;&#xA;&lt;li&gt;Docker启动速度快&lt;/li&gt;&#xA;&lt;li&gt;Docker安装管理方便&lt;/li&gt;&#xA;&lt;li&gt;Docker从第二次部署开始轻松简捷&lt;/li&gt;&#xA;&lt;li&gt;Docker可以每个应用使用一个服务，服务隔离&lt;/li&gt;&#xA;&lt;li&gt;Docker推荐使用Linux，不推荐使用Windows&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;安装及配置&#34;&gt;安装及配置&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;下载安装&lt;/li&gt;&#xA;&lt;li&gt;配置&#xA;&lt;ol&gt;&#xA;&lt;li&gt;启动Docker&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo systemctl enable docker&#xA;sudo systemctl start docker&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;创建Docker用户组&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo groupadd docker&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;将当前用户添加到docker组&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo usermod -aG docker $USER&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;测试Docker是否安装正确&lt;/li&gt;&#xA;&lt;li&gt;重启Docker&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo systemctl restart docker&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;docker核心概念&#34;&gt;Docker核心概念&lt;/h3&gt;&#xA;&lt;h4 id=&#34;整体架构图&#34;&gt;整体架构图&lt;/h4&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://stoneepigraph.github.io/ox-hugo/2021-01-10_17-34-07_screenshot.png&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h4 id=&#34;仓库-repository&#34;&gt;仓库 Repository&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;定义： 用来存储Docker中的镜像。&lt;/li&gt;&#xA;&lt;li&gt;分类：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;远程仓库&lt;/li&gt;&#xA;&lt;li&gt;本地仓库： 当前自己机器中下载镜像存储位置。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;镜像-image&#34;&gt;镜像 Image&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;定义： 一个镜像代表一个软件安装包。&lt;/li&gt;&#xA;&lt;li&gt;特点： 只读&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;容器-container&#34;&gt;容器 Container&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;定义： 基于某个镜像启动的实例，称之为一个服务。&lt;/li&gt;&#xA;&lt;li&gt;特定： 可读可写&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;常用命令&#34;&gt;常用命令&lt;/h3&gt;&#xA;&lt;h4 id=&#34;引擎-以及镜像相关的操作&#34;&gt;引擎， 以及镜像相关的操作&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;docker info&lt;/li&gt;&#xA;&lt;li&gt;docker &amp;ndash;help || docker 查看docker所有帮助命令&lt;/li&gt;&#xA;&lt;li&gt;docker version&lt;/li&gt;&#xA;&lt;li&gt;docker 执行命令格式： docker [options] command&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;操作镜像images的相关命令&#34;&gt;操作镜像images的相关命令&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;查看本地的镜像&#xA;docker images&lt;/li&gt;&#xA;&lt;li&gt;下载新的镜像&#xA;docker pull dockerImageName:dockerVersion&#xA;docker pull dockerImageName:@digest(摘要)&lt;/li&gt;&#xA;&lt;li&gt;搜索镜像&#xA;docker search dockerImageName&lt;/li&gt;&#xA;&lt;li&gt;删除镜像&#xA;docker image rm dockerImageName:dockerVersion&#xA;docker image rm dockerImageId&#xA;docker rmi &amp;hellip;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;容器相关-container&#34;&gt;容器相关 Container&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;运行容器&#xA;docker run dockerImageName:tag | 镜像ID&#xA;&lt;ol&gt;&#xA;&lt;li&gt;映射端口&#xA;docker run -p 宿主机端口:容器内服务端口 dockerImageName&lt;/li&gt;&#xA;&lt;li&gt;后台运行&#xA;-d&lt;/li&gt;&#xA;&lt;li&gt;给容器命名，唯一&#xA;&amp;ndash;name containerName&lt;/li&gt;&#xA;&lt;li&gt;-it&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;导入容器&#xA;docker load -i dockerTag.tar&lt;/li&gt;&#xA;&lt;li&gt;查看当前运行的容器&#xA;docker ps&#xA;&lt;ul&gt;&#xA;&lt;li&gt;查看所有的容器，包括已停止的&#xA;docker ps -a&lt;/li&gt;&#xA;&lt;li&gt;返回正在运行的容器ID&#xA;docker ps -q&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;重启，停止容器&#xA;docker start dockerContainerId | dockerName&#xA;docker restart dockerContainerid | dockerName&#xA;docker stop dockerCOntainerid | dockerName&lt;/li&gt;&#xA;&lt;li&gt;删除容器&#xA;docker rm dockerContainerId | dockerName&#xA;&lt;ol&gt;&#xA;&lt;li&gt;强制删除， 包括正在运行的容器&#xA;docker rm -f dockerContainerid | dockerName&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;查看容器内运行日志&#xA;docker log dockerContainerid | dockerName&#xA;&lt;ol&gt;&#xA;&lt;li&gt;实时查看日志&#xA;-f&lt;/li&gt;&#xA;&lt;li&gt;加入时间戳实时展示日志&#xA;-t&lt;/li&gt;&#xA;&lt;li&gt;显示指定行数的日志&#xA;&amp;ndash;tail Number&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;查看容器内的进程&#xA;docker top dockerContainerid | dockerName&lt;/li&gt;&#xA;&lt;li&gt;与容器内部进行交互&#xA;docker exec -it dockerCOntainerid | dockerName Command [args]&lt;/li&gt;&#xA;&lt;li&gt;宿主与容器的传输文件&#xA;&lt;ol&gt;&#xA;&lt;li&gt;从容器到操作系统&#xA;docker cp dockerContainerid | dockerName :/path/file ./file&lt;/li&gt;&#xA;&lt;li&gt;从宿主到容器&#xA;docker cp 文件 | 目录 dockerContainerid | dockerName: 容器内目录&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;查看容器内部细节&#xA;docker inspect dockerContainerid | dockerName&lt;/li&gt;&#xA;&lt;li&gt;数据卷 Volume&#xA;&lt;ol&gt;&#xA;&lt;li&gt;使用： 实现襥机系统与容器之间的文件共享&lt;/li&gt;&#xA;&lt;li&gt;特点：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;数据卷可以在容器之间共享和重用。&lt;/li&gt;&#xA;&lt;li&gt;对数据卷的修改会立即影响到对应容器。&lt;/li&gt;&#xA;&lt;li&gt;对数据卷的更新修改，不会影响镜像。&lt;/li&gt;&#xA;&lt;li&gt;数据卷默认会一直存在， 即使容器被删除。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;使用&#xA;&lt;ol&gt;&#xA;&lt;li&gt;自定义数据卷&#xA;docker run -v 宿主机目录:容器目录:ro dockerImageId&lt;/li&gt;&#xA;&lt;li&gt;自动创建数据卷&#xA;docker run -v 卷名:容器内路径 dockerImageId&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;查看卷&#xA;docker volume inspect volumeName&#xA;docker volume ls&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;将正在运行的容器打包成镜像&#xA;docker commit -m &amp;rsquo;&amp;rsquo; -a &amp;rsquo;&amp;rsquo; dockerContainerid dockerImageName:dockerTag&lt;/li&gt;&#xA;&lt;li&gt;将镜像备份&#xA;docker save 镜像名称:tag -o dockerBak-tag.tar&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;网络配置&#34;&gt;网络配置&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;docker容器与操作系统通信机制默认使用网桥&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
