<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 石记</title>
    <link>http://localhost:37867/posts/</link>
    <description>Recent content in Posts on 石记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 25 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:37867/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>修管日常FQ</title>
      <link>http://localhost:37867/posts/%E4%BF%AE%E7%AE%A1%E6%97%A5%E5%B8%B8fq/</link>
      <pubDate>Sat, 25 May 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:37867/posts/%E4%BF%AE%E7%AE%A1%E6%97%A5%E5%B8%B8fq/</guid>
      <description>企业平台 用户名密码错误企业平台账号为备案编号去掉修备的12位数字, 忘记密码联系企业所属修管科重置密码. 下载企业平台群文件有最新的企业平台安装包 企业平台提示网络异常或者老版本的(参数不是字符串) 确认一下电脑的internet Explorer浏览器能不能正常访问: https://weixiu.bjysgl.cn/bjvmpsf/f/ 正常情况下确认一下internet Explorer浏览器能不能正常上网就可以,如果能正常上网企业平台还是提示网络有问题,那么试一下上边儿的地址. 企业平台提示网络异常 确认一下是不是XP系统,企业平台已经不再支持XP系统了 确认一下internet Explorer浏览器能不能正常访问: https://weixiu.bjysgl.cn/bjvmpsf/f/ 无法访问,核实一下internet选项里的TLS1.2是不是勾选了, 现在企业平台最低要求TLS1.2(所以XP系统无法正常访问了,还有部分电脑默认是没选择TLS1.2的) 还无法访问,需要核实一下云服务商是不是对企业的外网IP做了封禁 无法上传附件核实一下internet选项里的TLS1.2是不是勾选了 打印合格证的时候提示未指定的错误去QQ群文件下载最新的企业平台安装包重新安装 企业找不到自己的备案编号让企业自己去这个地址https://weixiu.bjysgl.cn/bjvmpsf/f/ 查询备案编号 在这个网址查询不到企业的原因？ 确认企业是不是备案成功了 在这个页面查询时只输入企业名称，要么一定要跟备案的企业名称一称，要么只输入确认的几个字 登录企业平台提示账号已锁定让企业联系所属修管科, 一般是修管科将企业列入经营地异常会导致这种情况. 自动采集接口提示账号已锁定让企业去技术支持群下载最新的企业平台重新安装 登录企业平台提示未绑定MAC地址让企业从技术支持群的群文件里获取获取MAC地址的工具和操作视频,获取到MAC地址后上报给企业所属的修管科 企业说联系过修管科了,修管科也给绑定了MAC地址,可是还是登录不上去. 让企业发一下获取MAC地址工具结果截图, 登录企业平台露出登录账号和报错信息的截图和企业的备案编号三样东西给咱们,去系统里核对是否是绑定成功了. 企业要修管科的联系方式群文件有一个叫&amp;quot;本市道路运输管理部门联系电话&amp;quot;的文档, 咱们只有修管科这一个联系方式. 企业平台提示&amp;quot;下载错误,请联系管理员&amp;quot; 直接从群文件下载最新的企业平台安装包,重新安装. 企业平台被杀毒软件误杀技术支持群里有&amp;quot;企业被杀毒软件误杀的解决办法&amp;quot;文档. 企业录入维修纪录时无法选择维修接待员/质保员/维修人员人员是是按在职或兼职岗位在企业平台已经录入的人员列表里查询的 维修接待对应售后服务部下的维修接待员 质检员对应售后服务部的质量检验员 维修人员对应售后服务部下的机修技师,电气维修技师等 企业录入维修纪录时点击保存后一直转圈,未提示&amp;quot;保存成功&amp;quot; 这种情况有可能是网络问题,有可能是企业录入的日期不符合规范(还未修复),还有可能是维修配件里带有英文的逗号(最新版本已修复,不会再有这个问题). 维修纪录提示车牌号错误这种情况有可能是特殊的车牌号或者企业录入错误,让企业提供一下行驶证,我去核对一下. 维修纪录里车牌号码不能选择别的省的车牌车牌字头的下拉框是可以直接输入的.直接录入就可以. 合格证无法打印让企业确认一下Internet Explorer浏览器能不能正常打印内容. 如果正常再找我们. 如果不正常就是打印机的默认设置有问题了. 企业登记信息上报未通过需要重新上报您可在“综合查询-行管通知查询”，查看在最上方的&amp;quot;机动车维修经营登记信息审核结果通知书&amp;quot;，点击附件名称，下载通知书，查看审核未通过原因 企业登记审核结果通知书里提示企业缺少对应的配件及人员, 企业说企业本身就没这些人员或者设备 告诉企业登记信息的核对结果是按企业的开业条件去审核的. 提示质量检验员未上报驾驶证的,按企业的经营范围,给质量检验员上报驾驶证就可以了. 提示人员学历或职称不达标的,给对应的人员上传对应的学历 企业维修设备有些设备数量无法修改无法修改的设备可以多次点&amp;quot;添加&amp;quot;按钮,添加多条 企业登记信息上报时提示&amp;quot;环保措施或管理制度数据是否上报不完整&amp;quot; 确认一下管理制度里带星的是不是都上传了文件. 人员录入提示人员在其他企业在职 让员工联系上家企业办理离职 如果联系不到上家企业或者上家企业已经不经营了,那么联系企业所属修管科, 让修管科联系咱们办理离职 维修管理制度，环保制度上传格式问题 PDF, DOC,JPG,PNG 无法上传时需要修改选择文件类型 企业已经录入维修接待员,可还是无法选择维修接待人员 人员是否已录入 确认一下网络是否正常，首页是不是能正常获取数据，如果不能的话，确认一下网络是否正常，在internet选项里添加一下TLS1.2的支持。 环评是否上传环评现在不要求必传,如果做过了可以上传环评结果,没做过就可以不传了.</description>
    </item>
    
    <item>
      <title>Rust笔记</title>
      <link>http://localhost:37867/posts/rust%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 07 Apr 2024 23:32:39 +0800</pubDate>
      
      <guid>http://localhost:37867/posts/rust%E7%AC%94%E8%AE%B0/</guid>
      <description>Rust基础 数据类型 说明 Rust不会自动进行隐式类型转换。
Rust的整数类型都实现了From&amp;lt;T&amp;gt;和Into&amp;lt;T&amp;gt;trait, 使得我们可以在它们之间进行转换。From&amp;lt;T&amp;gt;trait包含from()方法，Into&amp;lt;T&amp;gt;trait包含into()方法。类型通过实现这些trait来表达它将被如何转换为另一个类型。
String 和 &amp;amp;str &amp;amp;str 是一个指向字符串片段的不可变引用 String是一个可变字符串缓冲区 对于String类型来说，应该倾向于使用&amp;amp;str,而不是&amp;amp;String.
String String可以看作由三个变量所组成的结构体，第一个变量为指向一块堆上连续内存的指针，第二个变量为这块内存里已经使用的总大小。第三个变量为这块内存的总长度capacity。 String在new的时候从堆里申请内存，在drop的时候释放内存。 String内部的指向的连续内存可以看作为u8的数组，String的使用接口确保了内部存储的确实为合法的UTF-8编码的字节。 &amp;amp;str &amp;amp;str是对String的一种借用形式，被称为字符串切片。 由于&amp;amp;str的特殊性让其与普通的引用区分开，这种携带了元数据的特殊引用也被称为胖指针。 ＆str非常有用，它能够引用String类型的多个不同子字符串而无需复制，避免复制。 元组 数组 let 变量名称:[数据类型;数组长度] = [默认值;数组长度] let 变量名称:[数据类型;数组长度] = [数据值1,数据值2...] 做为参数
可以进行值传递也可以进行引用传递.值传递方法内的修改不会影响方法外的数据.引用传递会同步修改.
集合 分类 迭代器
分类
iter() 返回一个只读可重入迭代器,迭代器元素的类型为&amp;amp;T into_iter() 返回一个只读不可重入迭代器,迭代器元素的类型为T inter_mut() 返回一个可修改可重入迭代器,迭代器元素的类型为&amp;amp;mut T 类型别名 说明
类型别名仅仅是别名,只是为了让可读性更好,并不是全新的类型 类型别名无法实现为外部类型实现外部特征等功能 newtype 为什么要使用newtype
自定义类型可以让我们给出更有意义和可主读性的类型名 对于某些场景,只有newtype可以很好的解决
为外部类型实现外部特征 危险期内部类型的细节 Sized和不定长类型DST 动态大小类型DST
编译器无法在编译期间得知该类型值的大小,只有到了程序运行时,才能动态获知. 正因为编译器无法在编译期获知类型大小,若你试图在代码中直接使用DST类型,将无法通过编译,所以DST类型只能保存在堆上,在栈上存一个引用类型. Rust中常见的DST类型有: str, [T], dyn Trait, 它们都无法单独被使用,必须要通过引用或者Box来间接使用
变量 rust里的变量默认是不可变的，如需需要声明可变变量，需要添加mut声明在变量名的前边。
&amp;amp; &amp;amp;放在参数前边表明变量是引用类型。
常量 常量与变量的区别 关键字是const而不是let 定义常量必须指明类型，不能省略 定义常量时变量的命名规则一般是全部大写 常量可以在任意作用域进行定义，其生命周期贯穿整个程序的生命周期。编译时编译器会尽可能将其内联到代码中，所以在不同地方对同一常量的引用并不能保证引用到相同的内存地址 常量的赋值只能是常量表达式/数学表达式，也就是说必须是在编译期就能计算出的值，如果需要在运行时才能得出结果的值比如函数，则不能赋值给常量表达式 对于变量出现重复的定义（绑定）会发生变量遮盖，后面定义的变量会遮住前面定义的变量，常量则不允许出现重复的定义 静态变量 静态变量与常量的区别 静态变量不会被内联，在整个程序中，静态变量只有一个实例，所有的引用都会指向相同一个地址 存储在静态变量中的值必须要实现Sync trait 全局变量 类型 编译期初始化的全局变量，const创建常量，static创建静态变量，Atomic创建原子类型 运行期初始化的全局变量，lazy_static用于懒初始化，Box::leak利用内存泄漏将一个变量的生命周期变为&amp;rsquo;static 错误处理 组合器 or()</description>
    </item>
    
    <item>
      <title>如何设计程序</title>
      <link>http://localhost:37867/posts/book/common/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Sun, 07 Apr 2024 23:24:21 +0800</pubDate>
      
      <guid>http://localhost:37867/posts/book/common/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E7%A8%8B%E5%BA%8F/</guid>
      <description>如何设计程序 Base 基本程序设计步骤 六个基本的程序设计步骤
问题分析和数据定义 合约,用途说明与结果的描述,函数头部 例子 函数模板 函数定义 测试 六个步骤产生定义明确的中间结果
问题数据类型描述 程序行为的非形式描述 说明程序行为的例子 开发程序的模板或视图 把模板转换成完整的定义 通过测试发现错误 要正确的设计程序需要做到
分析通常使用文字表述的问题 在抽象表达问题实质的同时使用例子进行说明 用精确的语言阐明所表述的语句和注释 通过检查,测试对上述活动进行评价和修改 关注细节 简单数据的处理 学生,教师和计算机 程序只是计算速度非常快的学生,不过程序并不能理解自然语言,所以我们需要学会一门计算机语言将自然语言翻译给计算机.但程序设计需要耐心和专心,保能关注每个微小的细节,并严格规划和对规划忠诚,才能避免错误.
数,表达式和简单程序 数和算术运算
讲述了数和Scheme的一些基本知识
变量和程序 字处理问题 错误 设计程序
设计程序至少需要如下4个步骤
理解程序的目的 程序设计的目标是创建一个接收输入并产生结果的机制.因此在开发程序时应该给每一个程序一个有意义的名字,并且说明输入数据和所产生的数据的类型,这称为程序的合约. 构造并标注例子 构造一个例子,并将其写入注释 程序体 写出程序 测试 检查程序计算所得的结果与预期数值是否相符. 设计诀窍并不能解决程序设计过程中所遇到的所有问题,它提供的是完成程序设计过程中不可避免的步骤的指导.
领域知识
阐明程序体通常需要与问题相关的知识,这种形式的知识称为领域知识.它可能来自简单或复杂的数学,或来自非数学学科.
程序就是函数加上变量定义 函数的复合
辅助函数原则: 对问题表述中所提到的或在进行实例计算中所发现的每种依赖关系都使用一个辅助函数进行明确表达.
变量定义
如果一个数值在程序中多次出现,应该使用变量定义给它一个名字.变量定义将一个名字与一个值相关联.
条件表达式和函数 布尔类型和关系
复合条件: and or not
函数和测试条件 条件和条件函数
cond表达式
条件函数的设计
数据分析和定义 了解问题表述所涉及的不同情况 主体-问题 主体包含的cond表达式的数目应该与不同情况的数目一样. 主体-答案 最后要确定对于每一个cond子句,函数应产生什么结果. 简化 检查表达式是否可以被简化. 非数值信息 (symbol=?</description>
    </item>
    
    <item>
      <title>Emacs Lisp</title>
      <link>http://localhost:37867/posts/emacslisp/</link>
      <pubDate>Sun, 17 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:37867/posts/emacslisp/</guid>
      <description>ELisp 快捷键 格式化区域代码： C - M - \ 执行代码： C - x C - e 相当于 eval-last-sexp
执行代码并将执行结果放到光标处： C - u C - x C - e 查找更多信息 查询函数信息： C - h f 查询变量信息： C - h v 查询快捷键信息： C - h k 使用正则表达式查询函数名： M - x apropos 数据类型 内建 内建的Emacs数据类型称为primitive types, 包括整数、浮点数、cons、符号（symbol)、字符串、向量(vector)、散列表(hash-table)、subr(内建函数， 比如cons, if, and)、byte-code function, 和其它特殊类型， 例如缓冲区(buffer)
数字 Emacs的数字分为整数和浮点数。1.属于整数
整数
一般来说最小范围是在-2**28 ~ 2**28-1.
(message &amp;quot;%s&amp;quot; most-positive-fixnum) ;&amp;quot;2305843009213693951&amp;quot; (message &amp;quot;%s&amp;quot; most-negative-fixnum) ;&amp;quot;-2305843009213693952&amp;quot; 测试函数</description>
    </item>
    
    <item>
      <title>JVM简述</title>
      <link>http://localhost:37867/posts/jvm/</link>
      <pubDate>Sun, 17 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:37867/posts/jvm/</guid>
      <description>类的加载,连接与初始化 加载 指的是将类的.class文件中的二进制数据读入到内存当中,将其放在运行时数据区的方法区内,然后在内存中创建一个java.lang.Class对象.
类的加载方式 从本地系统中直接加载 从网络下载.class 从zip, jar等归档中加载.class文件 从专有数据库中提取.class文件 将Java源文件动态的编译为.class文件 连接 验证确保被加载的类的正确性 准备为类的静态变量分配内存,并将其初始化为默认值 解析把类中的符号引用转换为直接引用 类的使用 主动使用 创建类的实例 访问某个类或接口的静态变量或对静态变量赋值 访问类的静态方法 反射 初始化一个类的子类 Java虚拟机启动时被标明为启动类的类 JDK1.7开始提供的动态语言支持：java.lang.invoke.MethodHandler实例的解析结果REF_getStatic, REF_PUTsTATIC, REF_invokeStatic句柄对应的类没有初始化，则初始化。 被动使用 初始化 所有的Java虚拟机实现必须在每个类或接口被Java程序&amp;quot;首次主动使用&amp;quot;时才进行初始化.
注意 当一个常量的值并非编译期间可以确定的,那么其值就不会被放到调用类的常量池中,这时在程序运行时,会导致主动使用这个常量所在的类,显然会导致这个类被初始化. 主动使用的方式 创建类的实例 访问某个类或接口的静态变量,或者对该静态变量赋值 调用类的静态方法 反射如Class.forName(&amp;ldquo;com.path.ClassName&amp;rdquo;) 初始化一个类的子类 Java虚拟机启动时被标明为启动类的类 JDK1.7开始提供的动态语言支持. 虚拟机参数 Tips 说明 -XX:+&amp;lt;option&amp;gt;, 表示开启option选项 -XX:-&amp;lt;option&amp;gt;, 表示关闭option选项 -XX:&amp;lt;option&amp;gt;=&amp;lt;value&amp;gt;, 表示将option选项的值设置为value 参数 &amp;ndash;XX:+TraceClassLoading: 用于追踪类的加载信息并打印出来. -Xss1M: 设置最大调用深度，防止栈举出。StackOverflowError。 -XX:MaxTenuringThreshold: 指定新征伐对象经过多少次回收后进入老年代，默认为15次。 -XX:PretenureSizeThreshold: 指定对象的大小超过在指定的大小之后，直接晋升老年代。 TLAB -XX:+UseTLBA: 使用TLAB, 默认开启。 -XX:+TLABSize: 设置TLAB大小 -XX:TLABRefillWasteFraction：设置维护进入TLAB空间的单个对象大小，他是一个比例值，默认为64,即如果对象大于整个空间的1/64,则在堆创建对象。 -XX:+printTLAB：查看TLAB。 -XX:ResizeTLAB: 自调整TLABRefillWasteFraction阀值。 垃圾收集器 -XX：UseSerialGC： 使用串行垃圾回收器。 -XX:+useParNewGC: 新生代使用ParNew回收器。老年代使用串行回收器。 -XX:parallelGCThreads： 指定Parnew收集器的线程数。 ParallelGC -XX:MaxGCPauseMills: 设置最大垃圾收集停顿时间。 -XX：GCTimeRatio： 设置吞量大小，它是一个0到100之间的整数，默认为100。 -XX:UseAdaptiveSizePolicy: 打开自适应模式。 CMS -XX:+UseConcMarkSweepGC -XX:ConcGCThreads:设置并发线程数量。 虚拟机调优策略 JVM参数调优主要设置堆内存，主要让GC不要去频繁回收垃圾，减少对老年代的回收。配置时让-Xms与-Xmx一致。</description>
    </item>
    
    <item>
      <title>Docker笔记</title>
      <link>http://localhost:37867/posts/docker/</link>
      <pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:37867/posts/docker/</guid>
      <description>入门 什么是Docker docker是一个容器技术。
Docker的优势 一致的运行环境， 更轻松的迁移。 对进程进行封装隔离，容器与容器之间互不影响，更高效的利用系统资源。 通过镜像复制多个环境一致的容器。 Docker与虚拟机的对比 Docker占用磁盘少 Docker的引擎比虚拟机系统占用CPU资源低 Docker启动速度快 Docker安装管理方便 Docker从第二次部署开始轻松简捷 Docker可以每个应用使用一个服务，服务隔离 Docker推荐使用Linux，不推荐使用Windows 安装及配置 下载安装 配置 启动Docker sudo systemctl enable docker sudo systemctl start docker 创建Docker用户组 sudo groupadd docker 将当前用户添加到docker组 sudo usermod -aG docker $USER 测试Docker是否安装正确 重启Docker sudo systemctl restart docker Docker核心概念 整体架构图 仓库 Repository 定义： 用来存储Docker中的镜像。 分类： 远程仓库 本地仓库： 当前自己机器中下载镜像存储位置。 镜像 Image 定义： 一个镜像代表一个软件安装包。 特点： 只读 容器 Container 定义： 基于某个镜像启动的实例，称之为一个服务。 特定： 可读可写 常用命令 引擎， 以及镜像相关的操作 docker info docker &amp;ndash;help || docker 查看docker所有帮助命令 docker version docker 执行命令格式： docker [options] command 操作镜像images的相关命令 查看本地的镜像 docker images 下载新的镜像 docker pull dockerImageName:dockerVersion docker pull dockerImageName:@digest(摘要) 搜索镜像 docker search dockerImageName 删除镜像 docker image rm dockerImageName:dockerVersion docker image rm dockerImageId docker rmi &amp;hellip; 容器相关 Container 运行容器 docker run dockerImageName:tag | 镜像ID 映射端口 docker run -p 宿主机端口:容器内服务端口 dockerImageName 后台运行 -d 给容器命名，唯一 &amp;ndash;name containerName -it 导入容器 docker load -i dockerTag.</description>
    </item>
    
    <item>
      <title>FreeMarker入门</title>
      <link>http://localhost:37867/posts/freemarker/</link>
      <pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:37867/posts/freemarker/</guid>
      <description>入门 模板 + 数据模型 = 输出 数据模型 数据模型的基本结构是树状的. 标量用于存储单一的值.这种类型的值可以是字符串,数字,日期/时间或者布尔值 哈希表是一种存储变量及其相关且有唯一标识名称的容器 序列是存储有序变量的容器.存储的变量可以通过数字索引来检索,索引通常从0开始. 值域 start..end: 包含结尾的值域 start..&amp;lt;end或者start..!end: 不包含结尾的值域 start..*length: 限定长度的值域. start..: 无右边界值域. 注意
值域表达式本身没有方括号 可以在..的两侧编写自述表达式而不需要圆括号 .., ..&amp;lt;, ..!, ..*是去处符,所以它们中间不能有空格. 无右边界值域的定义大小是2147483647 值域并不存储它们包含的数字. 哈希表 像连接字符串那样,也可以使用加号的方式来连接哈希表.如果两个哈希表含有键相同的项,那么在加号右侧的哈希表中的项优先. 模板 插值: ${paramsName} FTL标签 FTL标签与HTML标签有一些相似之处,这些标签的名称以#开头, 用户自定义的FTL标签则需要使用@来代替#. 注释注释使用&amp;lt;#&amp;ndash; and &amp;ndash;&amp;gt; 来标识 其它任何不是FTL标签,插值或注释的内容被视为静态文本,这些东西不会被FreeMarker所解析, 会被按照原样输出来. 基本指令 IF指令 &amp;lt;#if condition&amp;gt; &amp;lt;/#if&amp;gt; &amp;lt;#if condition&amp;gt; if statement &amp;lt;#elseif condition&amp;gt; elseif statement &amp;lt;#else&amp;gt; else statement &amp;lt;/#if&amp;gt; list指令展示列表内容 基本 &amp;lt;ul&amp;gt; &amp;lt;#list listObj as obj&amp;gt; &amp;lt;li&amp;gt;${ojb} &amp;lt;/#list&amp;gt; &amp;lt;/ul&amp;gt; 如果列表为空的话,整个列表都不展示 &amp;lt;#list listObj&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;#items as obj&amp;gt; &amp;lt;li&amp;gt;${obj} &amp;lt;/ul&amp;gt; &amp;lt;/#list&amp;gt; 如果列表为空的话展示一些其它信息 &amp;lt;#list listObj&amp;gt; &amp;lt;p&amp;gt; ListDesc: &amp;lt;ul&amp;gt; &amp;lt;#items as obj&amp;gt; &amp;lt;li&amp;gt;${obj}&amp;lt;#sep&amp;gt;septarator&amp;lt;/#sep&amp;gt; &amp;lt;/#items&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;#else&amp;gt; &amp;lt;p&amp;gt; list is empty.</description>
    </item>
    
    <item>
      <title>Gitignore</title>
      <link>http://localhost:37867/posts/git/gitignore/</link>
      <pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:37867/posts/git/gitignore/</guid>
      <description> 规则 mtk 过滤整个文件夹 *.zip 过滤所有.zip文件 /mtk/do.c 过滤某个具体文件 !*.zip 反忽略 !/mtk/one.txt反忽略 *.a # 忽略所有 .a 结尾的文件 !lib.a # 但 lib.a 除外 /TODO # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO build/ # 忽略 build/ 目录下的所有文件 doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt </description>
    </item>
    
    <item>
      <title>Git常用命令</title>
      <link>http://localhost:37867/posts/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:37867/posts/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>Git常用命令 新建代码库 在当前目录新建一个Git代码库 &amp;gt; git init
新建一个目录，将其初始化为Git代码库 &amp;gt; git init [Project_name]
下载一个项目和它的整个代码历史 &amp;gt; git clone [url]
配置 添加指定文件到暂存区 &amp;gt; git add [fileName] &amp;hellip;
添加当前目录的所有的文档到暂存区 &amp;gt; git add .
删除工作区文件，并且将这次删除放入暂存区 &amp;gt; git rm [fileName] &amp;hellip;
停止追踪指定文件，但该文件会保留在工作区 &amp;gt; git rm &amp;ndash;cached [filename] 改名文件，并且将这个改名放入暂存区 &amp;gt; git mv [file-original] [file-renamed] 全局配置忽略Linux与Windows回车的类型 git config --global core.autocrlf true代码提交 提交暂存区到仓库区 &amp;gt; git commit -m [Message] 提交暂存区的指定文件到仓库区 &amp;gt; git commit [file1] [file2] &amp;hellip; -m [message] 提交工作区自上次commit之后的变化，直接到仓库区 &amp;gt; git commit -a 提交时显示所有diff信息 &amp;gt; git commit -v 使用一次新的commit, 替代上一次提交，如果代码没有变化，则用来改写上一次commit的提交信息 &amp;gt; git commit &amp;ndash;amend -m [message] 重做上一次commit, 并包括指定文件的新变化 &amp;gt; git commit &amp;ndash;amend &amp;hellip; 分支 列出所有本地分支 &amp;gt; git branch</description>
    </item>
    
    <item>
      <title>maven基础</title>
      <link>http://localhost:37867/posts/maven/</link>
      <pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:37867/posts/maven/</guid>
      <description>Maven库： http://repo2.maven.org/maven2/
Maven依赖查询： http://mvnrepository.com/
Maven常用命令： 创建Maven的普通java项目： mvn archetype:create -DgroupId=packageName -DartifactId=projectName 创建Maven的Web项目： ​ mvn archetype:create ​ -DgroupId=packageName ​ -DartifactId=webappName ​ -DarchetypeArtifactId=maven-archetype-webapp
编译源代码： mvn compile 编译测试代码：mvn test-compile 运行测试：mvn test 产生site：mvn site 打包：mvn package 在本地Repository中安装jar：mvn install 清除产生的项目：mvn clean 生成eclipse项目：mvn eclipse:eclipse 生成idea项目：mvn idea:idea 组合使用goal命令，如只打包不测试：mvn -Dtest package 编译测试的内容：mvn test-compile 只打jar包: mvn jar:jar 只测试而不编译，也不测试编译：mvn test -skipping compile -skipping test-compile ​ ( -skipping 的灵活运用，当然也可以用于其他组合命令)
清除eclipse的一些系统设置:mvn eclipse:clean ps：一 般使用情况是这样，首先通过cvs或svn下载代码到本机，然后执行mvn eclipse:eclipse生成ecllipse项目文件，然后导入到eclipse就行了；修改代码后执行mvn compile或mvn test检验，也可以下载eclipse的maven插件。 mvn -version/-v 显示版本信息 mvn archetype:generate 创建mvn项目 mvn archetype:create -DgroupId=com.</description>
    </item>
    
    <item>
      <title>SVN常用命令</title>
      <link>http://localhost:37867/posts/svn/</link>
      <pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:37867/posts/svn/</guid>
      <description> 常用SVN命令 svn checkout 签出,创建新的工作拷贝. svn info 搞清楚工作拷贝从哪里来的. svn update 从项目仓库中更新目录中的所有文件 svn add 添加文件的目录到项目仓库中 svn propset 设置文件的属性 svn add 添加文件 svn delete 删除文件 svn move src.file dist.file 移动文件 svn commit -m &amp;lsquo;提交信息&amp;rsquo; svn log filename 查看指定文件的历史 svn diff 展示文件版本之间的差异. 在版本之间找差异 svn diff -r19:21 filename 使用-r选项来指定一个版本范围 svn revert 删掉本地改动并使用项目仓库中的文件版本 svn resolved 修正冲突后执行 svn blame 显示每个文件的每一行最后的版本, 以及做出这个改动的人 svn update 获取最新的代码 svn merge -r 27:26 filename 移除file中版本27的改动 svn lock filename 给文件加锁 </description>
    </item>
    
    <item>
      <title>UML</title>
      <link>http://localhost:37867/posts/uml/</link>
      <pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:37867/posts/uml/</guid>
      <description> 基础知识 UML图 类图 表述系统中各个对象的类型以及其间存在的各种静态关系.类图也示明类中的特性和操作以及用于对象连接方式的约束.
聚合与组合
聚合是整体-部分关系.
可见性
+: 公用 -: 私用 ~: 包 #: 受护 顺序图 顺序图能明晰地指出参加者交互方面的区别.不擅长于示明诸如循环与条件行为等算法细节,但却能使参加者之间的调用一目了然. 当你考查单个用例内部若干对象的行为时,
用例图 用例通过表述系统的用户和系统本向之间特有的交互而工作,提供了如何使用系统的一种陈述.
对象图 是在一个时间点上系统中各个对象的一个快照. 由于对象图示明的是实例而不是类,
包图 在UML中用双冒号表示包名. 对大型系统要了解系统主要成分之间的依赖时,使用包图. 包图表示一种编译时刻的聚组机制.关于示明在运行时刻如何来组合各个对象.
部署图 通过揭示&amp;quot;哪些软件片段运行于哪些硬件片段上&amp;quot;来示明系统的一个物理布局. 任何复杂的部署都可以很好地使用部署图.
活动图 活动图可以示明组织机构的工作流,示明软件与人的活动如何交互.活动图还可以示明用例的环境发及复杂用例如何工作的细节. 考查跨用例或跨线程的行为,就考虑活动图. 活动图是一种表述过程基理,业务过程以及工作流的技术.
分划
分划示明一个类或一个机构单位施行哪些动作.
信号
活动图有明确定义的起点,它对应于程序或例和的启用.动作亦可对应于信号. 信号指明活动接收来自外部过程的一个事件.
权标 流与边
是UML2中用来表述两个动作之间连接的同义词.
饰针与转换 展开区域
展开区域是活动图上标出的一个区域,其中的动作对一个组中每一项均要发生一次.
流终
流终(flow final)指明在整个活动并未终止时,一个特定流的终结.
汇合指明 何时使用活动图
活动图最大的优点是,它们支持并鼓励并行行为.这使它们成为工作流建模和过程建模的一项重要工具.
通信图 通信图是一种着重阐明交互中各个参加者之间的数据连接的交互图. 在UML1.x中,这些图称为协作图.
构件图 状态图 如果一个概念具有有趣的生命周期,具有各种状态发及改变状态的事件,状态图则可能有用. 考虑用例的单个对象的行为,就用状态图.
交互概观图 是将活动图与顺序图嫁接在一起的图.
定时图 Tips 进行需求分析时,最重要的是与用户及客户有交流.通常他们都不是软件业人士,并且不熟悉UML或任何别的技术.要记住,不要引进软件实现所特有的任何东西 .不论何时都要准备背离UML的规则,如果它能帮助你更好地进行交流的话.在分析过程中使用UML最大风险是领域专家对你所绘的图不能完全理解.一个了解领域的人不理解的图比无用更坏,它所做的一切是使开发组产生一种错误的自信感. </description>
    </item>
    
    <item>
      <title>代码之外的生存指南</title>
      <link>http://localhost:37867/posts/%E4%BB%A3%E7%A0%81%E4%B9%8B%E5%A4%96%E7%9A%84%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/</link>
      <pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:37867/posts/%E4%BB%A3%E7%A0%81%E4%B9%8B%E5%A4%96%E7%9A%84%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/</guid>
      <description>为何这本书与你先前读过的任何书籍都迥然不同 讲述如何成为一名优秀的软件开发人员的书，优秀开发人员指的是那些能够把控自己的职业生涯，达成目标，享受生活的人。本书并不再讨论你能做什么，而是讨论你自己。关乎你的职业生涯，你的生活，你的身体，你的思想及你的灵魂。
职业生涯：学习如何主动管理自己的职业生涯，从而达到自己追寻的结果。 自我营销：学习如何推销自己。 如何打造个人品牌，如何打造一个成功的博客，如何通过演讲，教学，著书立说的方式让你扬名立万。 学习：学习如何学习，学习如何自觉 生产力：关于如何让工作更加富有成效的 理财：学习如何有效地管理你赚到的财。 健身： 精神： 职业 你所能犯的最大错误就是相信自己是在为别人工作。这样一来你对工作的安全感已然尽失。职业发展的驱动力一定是来自个体本身。记住：工作是属于公司的，而职业生涯却是属于你自己的。体验决策过程：你要决定自己想要从软件开发这个职业中获得什么，以及如何去获得。
从非同凡响开始：绝不要做其他人都在做的事 拥有商业心态 因为只有你开始把自己当作一个企业去思考时，你才能开始做出良好的商业决策。尽管在你的职业生涯的某个特定时间段里，你可能确实是在为某家公司打工，但是千万不要让那个特定的角色固化了你和你的整个职业生涯。我们需要把雇主当作是自己的软件开发企业的一个客户。
如何像企业一样思考 理解企业的构成：首先，要有一个产品或服务，我的产品是什么？通常软件开发人员售卖的就是他们把一个想法变成一个数字化的现实产品的能力。作为一名软件开发人员，你提供的服务具备有形价值，你要传达的不仅是这款软件的价值是什么，还有它与别的成千上万款软件开发人员提供的服务有什么不同。同时，你需要认识到仅有服务或产品是不够的。想要赚钱，你就必须能让潜在的客户了解该产品或服务。所以我需要做到：
专注于你正在提供怎样的服务，以及如何营销这项服务。 想方设法提升你的服务 思考你可以专注为哪一特定类型的客户或行业提供特定的服务 集中精力成为一位专家，专门为某一特定类型的客户提供专业的整体服务（记住，作为一个软件开发人员，你只有真正专注于一类客户，才能找到非常好的工作） 另外，还要想想如何更好地宣传你的服务，如何更好地找到你的客户。
思考未来：你的目标是什么 定义你的业务目标要实现任何目标，都必须先知道目标是什么。
如何设定目标 起步阶段最简单的就是在心中树立一个大目标，然后再建立能帮你达成这个大目标的小目标。因为很难清晰地界定远期可能发生的事情，所以大目标通常不是非常明确。不过大目标不一定要非常具体。只要目标能具体到给你提供清晰的方向即可。花点儿时间思考一下你的大目标，你希望从职业生涯中收获什么？你希望自己5年或10年之后在哪里？——这非常重要。一旦你想通了自己长远的大目标是什么，下一步注是设定路线，制订通往大目标的小目标。有时还可以运用一下逆向思维，反推一下如何从大目标到当前的情况。如果你可以驱动小目标逐渐前行并靠近你的大目标，那么你最终一定会达到目的地。
追踪你的目标 你应该定期追踪并更新自己设定的目标，必要时还要调整。建议你定期核对自己的目标，这有助于在必要时进行调整，让你对自己负责。反思自己在短期和长期取得的成果是大有裨益的，你能够弄清自己是否取得了合理的进展，或者是否需要进行某些调整。
人际交往能力：远比你想象的重要 别管我，我只想一个人安静地写代码 我曾经对软件开发人员的工作的印象就是写代码。事实上，在软件开发领域，我们大多数时候是与人而非与计算机打交道。甚至我们所写的代码首先是供人使用的，其次才是让计算机可以理解。
学会如何与人打交道 每个人都希望感觉自己很重要
当你和别人打交道的时候，你应该知道 的最重要的一个概念就是：以自己为核心，每个人都希望自己很重要。这是人类最深邃，最致命的欲望之一，也是社会和生活中取得伟大成就的主要动机。我们常常容易犯的一个错误就是，轻率地否决同事的想法，以便于可以提出自己的想法。然而承着你作出这样的错误判断，你往往会发现他们对你的想法充耳不闻，仅仅因为你让他们感觉自己是无足轻重的。如果你希望人们接受你的想法，并认可其中的价值，首先你最好先主动给他人相同的礼遇。如果你不能保全他人的自尊，那你永远也不可能赢得他的心。
永远不要批评
研究表明，奖励积极行为要比惩罚消极行为有效得多。
换位思考
在人际交往方面获得成功的关键在于：停止用“我”和“我想要什么“来思考。你应当开始思考对他人而言什么才最重要，什么才是他们需要的。
避免争吵
作为软件开发人员，我们有时候倾向于认为所有人是从逻辑角度来思考问题的，这很容易让你落入陷阱，错误地认为严谨的推理足以使他人接受你的思维方式。事情的真相是：尽管我们为自己的智慧感到骄傲，但人们依然是情感动物。我们就像那些穿着西装，打着领带，四处游荡的小孩，假装自己已经长大，其实任何轻微的伤害都能让我们号啕大哭，或者大发雷霆，我们只是已经学会了如何控制和隐藏这些情绪。如果你因为”该怎么做某事“与他人产生分歧，那么在很多情况下，你最好先确定分歧点是否值得你去拼命维护，特别是在你知道它已让他人卷入时。如果你从来没花时间来提高自己的人际交往能力，那现在正当其时。你会发现，当你学会了如何以令人愉悦的方式与他人互动和交往的时候，自己的生活也越来越愉快。通过买得这些技能，你积累了让自己获益终生的财富，它的价值无法用金钱衡量。
破解面试之道 通过面试的最快捷的方式 通过面试最快捷的方式是让面试官对你怀有好感。达成该目标有很多方法，其中大多数可以在面试之前完成。
我是如何得到最后一份工作的 我事先确定了我要入职的公司，我花了一些时间研究这家公司，找出这个公司有哪些开发人员在写博客。我开始关注为这家公司工作的开发人员的所有博客。并开始在他们的博客文章下留下经过沉思熟虑的评论。慢慢地，许多在这家公司供职的开发人员开始认识了我，并通过我给他们博客做出的评论知道了我是谁，他们中的一些人甚至开始读我的博客。接下来，当这家公司开始招聘开发人员的时候，我递交了申请。
突破陈规，建立融洽关系 “破解”面试的要诀就是在面试开始之前就思考应对面试的策略。大量工作岗位来自“个人推荐”。你要试图确保你申请的职位也适用于个人推荐。所以你必须要突破常规，想尽办法与公司内部人员建立联系。随着社交媒体和互联网的广泛应用，你能非常容易地找到任何公司的各种信息，也容易与他们的员工建立联系。
真正的面试会是什么样子的 如果顺利的话，在你走进面试间的时候，面试官已经知道你是谁了，但无论如何 ，你都需要了解在面试时自己该做什么。现在，很明显，你需要从技术能力上证明你可以通过技术面试。接下来要关注的事情就是自信地展示自己的能力。——知道要获得这份工作需要做什么，做就是了。对于公司来说招聘员工就是一项投资。与其雇用技术高超但需要生拉硬拽才能干活的人相比，宁愿雇用这样的开发人员：知道的东西可以少一点，但是明确知道要做什么，以及怎样去做。从某种程度上，在你可控的内，面试的时候你要集中精力证明自己就是无需督促也能自动自发做好事情的员工。你还必须要证明：在技术上你确实胜任工作。同时，如果你能说服面试官相信你非常能干，不会被困难阻挡，那么他们不仅会喜欢你，而且更有可能会录用你。
当下你能做什么 不管你现在是正在积极寻找工作，还是给自己保留选择的余地，再没有比现在更好的时机去开始准备你的下一场求职面试了。你应该做的第一件事情是确保自己仍旧保持技术能力。所以确保自己一直阅读技术书籍和博客文章，并会花些时间提升自己的技能。你也可以未雨筹谋，拓展自己的社交网络。开始与本领域不同公司的员工接触，建立联系，他们日后会帮到你。通过阅读并评论他们的博客，认识本领域的其他开发人员甚至是招聘人员。想方设法扩大你的社交圈子。别忘了实践，即使你现在对换新工作毫无兴趣，为了获得面试经验，你也要去面试。集中精力推销自己会对你大有裨益。行动：
即使你现在不需要努力找工作，也要整理一份清单，列出你想去工作的公司，以及你认识 的公司的人 在这份清单上的，如果有的公司你一个人都不认识，那么制订计划至少去认识这些公司中的一位员工，并与之建立联系。 在自己所在的领域找出至少一个本地用户组，参数聚会，并把自己介绍给尽可能多的人。 就业选择：列出你的选择 落入俗套很容易，循规蹈矩也很容易，只要跟其他人做一样的事情就是了。你自己甚至可能都不知道除了雇用型劳动关系之外还有其他选项。
选择一：雇员 对广大软件开发人员而言，这是一项常见的，默认的就业选择。一部分原因是因为不知道还有其他选项，一部分在于这是最容易的选择。身为雇员的最大的好处就是稳定。作为一名雇员也是一条比其他选择更轻松的道路，因为你的职责是有限的，路线明晰。寻找和申请工作都有一个明确定义的流程。你也无需要操心“做什么才能赚钱”这种问题。作为一名雇员，你通常还有带薪年假。作为一名雇员的消极方面，很大部分与自由相关。此外，作为一名雇员也意味着你的收入是事先确定好的，这就意味着收入有一个“封顶”的界限。
选择二：独立咨询师 作为独立咨询师，软件开发人员不再为特定的单个雇主工作，而是服务于一个或多个客户。如果你曾兼职为某个客户写程序，他们以时薪或固定价格付你报酬，那你就明白什么是咨询了。做独立咨询师最大的好处可能就是赚钱的潜力。作为独立咨询师，你其实就是名副其实的经营者（不仅仅指心态），你要负责税务，法律咨询，销售，健康保险以及各种与企业经营有关的事情。
创业者 创业之路可能是你职业生涯中最验证，最不确定但却最具回报潜力的选择。“创业者”意味着软件开发者使用自己的软件技能开发自己的产品，拓展自己的业务。“创业者”的优势： 完全的自由和完全不封顶的赚钱潜力。但需要学习诸多方面的技能：销售，市场营销，以及商业和理财待。
到底应该选哪个 选择什么完全取决于你自己，并且你也可以随时切换路径。虽然这并不容易。
你是哪类软件开发人员 专业化很重要 有大量的软件开发人员并没有具体的专业方向。虽然专业化确实会把你关在一些机会的大门之外，但与此同时它将打开的机会大门要比你用其他方式打开的多得多。从表面上看，身为”专才“后，潜在雇主和客户群都变小了，但是实际上你对他们更具吸引力了。只要你专业能力雄厚，市场没有过度饱和，与那些自称为”软件开发人员“的人相当，你能更轻松地找到工作或者赢得客户。</description>
    </item>
    
    <item>
      <title>学习</title>
      <link>http://localhost:37867/posts/study/</link>
      <pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:37867/posts/study/</guid>
      <description> 提问 提问的智慧 提问的智慧http://www.catb.org/~esr/faqs/smart-questions.html 提问的智慧https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md 学习新技术的逻辑 这个技术出现的背景、初衷和要达到什么样的目标或是要解决什么样的问题。这个问题非常关键，也就是说，你在学习一个技术的时候，需要知道这个技术的成因和目标，也就是这个技术的灵魂。如果不知道这些的话，那么你会看不懂这个技术的一些设计理念。 这个技术的优势和劣势分别是什么，或者说，这个技术的 trade-off 是什么。任何技术都有其好坏，在解决一个问题的时候，也会带来新的问题。另外，一般来说，任何设计都有 trade-off（要什么和不要什么），所以，你要清楚这个技术的优势和劣势，以及带来的挑战。 这个技术适用的场景。任何技术都有其适用的场景，离开了这个场景，这个技术可能会有很多槽点，所以学习技术不但要知道这个技术是什么，还要知道其适用的场景。没有任何一个技术是普适的。注意，所谓场景一般分别两个，一个是业务场景，一个是技术场景。 技术的组成部分和关键点。这是技术的核心思想和核心组件了，也是这个技术的灵魂所在了。学习技术的核心部分是快速掌握的关键。 技术的底层原理和关键实现。任何一个技术都有其底层的关键基础技术，这些关键技术很有可能也是其它技术的关键基础技术。所以，学习这些关键的基础底层技术，可以让你未来很快地掌握其它技术。可以参看我在 CoolShell 上写的 Docker 底层技术那一系列文章。 已有的实现和它之间的对比。一般来说，任何一个技术都会有不同的实现，不同的实现都会有不同的侧重。学习不同的实现，可以让你得到不同的想法和思路，对于开阔思维，深入细节是非常重要的。 </description>
    </item>
    
    <item>
      <title>重构2</title>
      <link>http://localhost:37867/posts/%E9%87%8D%E6%9E%842/</link>
      <pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:37867/posts/%E9%87%8D%E6%9E%842/</guid>
      <description>开始 本章重构：
将原函数分解成一组嵌套的函数 分离计算逻辑与输出格式化逻辑 为计算器引入多态性来处理计算逻辑 好的代码的检验标准就是人们是否能构轻易地修改它注： 小步累积
重构的原则 何谓重构 名: 对软件内部结构的一种调整,目的是在不改变软件可观察行为的前提下,提高其可理解性,降低其修改成本. 动: 使用一系列重构手法,在不改变软件可观察行为的前提下,高速其结构. 重构时不添加新功能,添加新功能时不重构. 为何重构 改进软件的设计 使软件更容易理解 帮助找到BUG 提高编程速度 何时重构 事不过三, 三则重构
预备性重构: 在添加新功能之前进行重构 帮助理解的重构: 捡垃圾式重构: 不想从眼下正要完成的代码上跑题太多,但也不想把垃圾留在原地.所以在重构可以很快完成时就立即重构,如果需要花一些精力,可以做一个TODO.至少要让营地比你到达时干净. 有计划的重构和见机行事的重构每次修改时,首先令修改很容易,然后再进行这次容易的修改. 长期重构如果想替换掉一个正在使用的库,需要很长时间,可以先引入一层新的抽象,使其兼容新旧的两个库的接口.一旦调用方已经完全为使用这层抽象,替换掉下面的库就会容易很多. 重审代码时重构 何是不应该重构 如果我看见一块凌乱的代码,但并不需要修改它,那么我就不需要重构它. 如果丑陋的代码能被隐藏在一个API之下,我就可以容忍它继续保持丑陋. 如果重写比重构还容易,就别重构了. 重构的挑战 延缓新功能开发 代码的坏味道 神秘命名 重复代码 过长函数 现代编程语言几乎已经完全免除了进程内的函数调用开销.
过长的参数列表 如果可以向某个参数发起查询而获得另一个参数的值,那么就可以使用以查询取代参数去掉这第二个参数. 如果正在从现有的数据结构中抽出很多数据荐,就可以考虑使用保持对象完整手法 如果有几项参数总是同时出现,可以引入参数对象 如果某个参数被用作区分函数行为的标记,可以使用移除标记参数. 全局数据 可以把全局数据用一个函数包装起来,至少能看见修改它的地方.
可变数据 发散式变化 每次只关心一个上下文
霰弹式修改 依恋情结 总是将一起变化的东西放在一块儿.
数据泥团 基本类型偏执 可以运用使用对象取代基本类型
重复的switch 任何switch语句都应该用以多态取代条件表达式.
循环语句 可以使用管道取代循环
冗赘的元素 有些类或者额外的结构在设计过程中不再有用,就把它抛弃
夸夸其谈通用性 那些我们想的总有一天需要做这些事,并且企图以各式各样的钩子和特殊情况来处理一些非必要的事情.
临时字段 过长的消息链 可以使用隐藏委托关系
中间人 如果你看到某个类中有一半的函数都委托给其它类,这样就是过度运用.</description>
    </item>
    
    <item>
      <title>Jenkins入门</title>
      <link>http://localhost:37867/posts/jenkins%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:37867/posts/jenkins%E5%85%A5%E9%97%A8/</guid>
      <description> gitlab配置 wget &amp;ndash;content-disposition https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-13.2.4-ce.0.el7.x86_64.rpm/download.rpm 安装信赖 yum install curl openssh-server postfix cronie yum -y install policycoreutils-python rpm -ivh gitlab-ce config gitlab vi /etc/gitlab/gitlab.rb external_url: nginx[&amp;rsquo;listen_port&#39;] gitlab-ctl reconfigure gitlab-ctl restart 配置防火墙 配置gitlab组及用户 jenkins安装 安装Jenkins跳过插件安装 jenkins插件安装 tips 三台服务器,一台gitlab, 一台Jenkins, 一台测试服务器 </description>
    </item>
    
    <item>
      <title>Oracle一些简单查询</title>
      <link>http://localhost:37867/posts/oracle%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:37867/posts/oracle%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E6%9F%A5%E8%AF%A2/</guid>
      <description>Oracle一些基本查询 字符集相关 查询数据库字符集 select userenv(&#39;language&#39;) from dual; 实例相关 查询实例名 select instance_name from v$instance; 锁相关 查看被锁的表 select b.username,b.sid,b.serial#,logon_time from v$locked_object a,v$session b where a.session_id = b.sid order by b.logon_time; 杀死锁进程 alter system kill session &#39;id,serial*&#39;; 查询表之前的状态 select * from tablename AS OF TIMESTAMP (SYSTIMESTAMP - INTERVAL &#39;50&#39; MINUTE) 用户 查询当前用户的缺省表空间 select username,default_tablespace from user_users; 查询当前用户的角色 select * from user_role_privs; 查看当前用户的系统权限和表级权限 select * from user_sys_privs; select * from user_tab_privs; 查询用户下的所有的表 select * from user_tables; 表 查看用户下所有的表 select * from user_tables; 查看名称包含log字符的表 select object_name,object_id from user_objects where instr(object_name,&#39;LOG&#39;)&amp;gt;0; 查询表的创建时间 select object_name,created from user_objects where object_name=upper(&#39;&amp;amp;table_name&#39;); 查询表的大小 select sum(bytes)/(1024*1024) as &amp;quot;size(M)&amp;quot; from user_segments where segment_name=upper(&#39;&amp;amp;table_name&#39;); 查看放在Oracle的内存区里的表 select table_name,cache from user_tables where instr(cache,&#39;Y&#39;)&amp;gt;0; 查询表的DDL语句 select dbms_metadata.</description>
    </item>
    
    <item>
      <title>postgresql-note</title>
      <link>http://localhost:37867/posts/postgresql%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:37867/posts/postgresql%E7%AC%94%E8%AE%B0/</guid>
      <description>安装及配置 安装 下载postgresql https://www.postgresql.org/download/ 安装 按照官网的说明安装 su - postgres -c &amp;quot;pg_ctl -D /var/lib/postgres/data -l /var/log/postgresql/postgresql.log start&amp;quot; 切换到postgres用户修改postgres密码 su - postres alter user postgres with password &#39;passwod&#39; 备份及恢复 备份 pg_dump dbname &amp;gt; dbname.bak # 备份单个数据库 pg_dumpall &amp;gt; pd_backup.bak # 备份所有的数据库 备份格式有三种， 可以使用-F指定
*.bak 压缩二进制文件 *.sql 明文转储 *.tar tarball t 恢复 psql dbname &amp;lt; dbanme.bak pg_restore -U postgres -d dbname /tmp/back_filename.tar 注意 使用psql恢复数据库需要先创建一个空的对应名称的数据库
序列 查询序列的值 select nextval(&#39;sys_menu_menu_id_seq&#39;); 修改序列的值从某个新值开始 SELECT setval(&#39;bi_his_corp_policy_part_id_seq&#39;, (SELECT MAX(id) FROM bi_his_corp_policy)); 修改序列 alter sequence sys_menu_menu_id_seq increment by 1 restart with 2354; 基础 函数 创建函数 exp insert create or replace function fun_date2utc(p_date timestamp) returns bigint language pluxsql as $$ declare utc integer; begin utc = 86400 * (p_date - to_date(&#39;1970/01/01 00:00:00&#39;, &#39;YYYY/MM/DD HH24:MI:SS&#39;)) - 8*3600; return utc; end; $$; create trigger trg_insert_local_vehicle2_dynamic before insert on bi_inf_vehicle_local for each row execute procedure check_insert_dynamic_vehicle(); exp delete create function check_delete_dynamic_vehicle() returns trigger language pluxsql as $$ begin delete from vd_sta_vehicle_local where vehicle_id = old.</description>
    </item>
    
  </channel>
</rss>