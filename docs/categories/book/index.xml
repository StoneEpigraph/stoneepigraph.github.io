<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Book on 石记</title>
    <link>https://stoneepigraph.github.io/categories/book/</link>
    <description>Recent content in Book on 石记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 16 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://stoneepigraph.github.io/categories/book/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DDIA</title>
      <link>https://stoneepigraph.github.io/posts/ddia/</link>
      <pubDate>Mon, 16 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>https://stoneepigraph.github.io/posts/ddia/</guid>
      <description>&lt;h2&gt;数据密集型应用设计&lt;/h2&gt;


&lt;h3&gt;数据系统基础&lt;/h3&gt;


&lt;h4&gt;可靠、可扩展与可维护的应用系统&lt;/h4&gt;

&lt;p&gt;对于数据密集型应用，CPU的处理能力往往不是第一限制性因素，在于数据量、数据的复杂度及数据的快速多变性。数据密集型应用通常也是基于标准模块构建而成，每个模块负责单一的常用功能。例如，许多应用系统都包含以下模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库： 用以存储数据，这样之后应用可以再次访问&lt;/li&gt;
&lt;li&gt;调整缓存：缓存那些复杂或操作代价昂贵的结果，以加快下一次访问。&lt;/li&gt;
&lt;li&gt;索引：用户可以按安搜索数据并支持各种过滤。&lt;/li&gt;
&lt;li&gt;流式处理：持续发送消息臻另一个进程，处理采用异步方式&lt;/li&gt;
&lt;li&gt;批处理：定期处理大量的累积数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可靠性&lt;/p&gt;
&lt;p&gt;当出现意外情况，如硬件、软件故障、人为失误等，系统应可以继续正常运转：虽然性能可能有所降低，但确保功能正确。对于软件,典型的可靠性期望包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用程序执行用户据期望的功能.&lt;/li&gt;
&lt;li&gt;可以容忍用户出现错误或者不正确的软件使用方法&lt;/li&gt;
&lt;li&gt;性能可以应对典型场景, 合理负载原动力和数据量&lt;/li&gt;
&lt;li&gt;系统可防止任何示经授权的访问和滥用&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;硬件故障&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;软件故障&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;原因&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于软件错误&lt;/li&gt;
&lt;li&gt;一个应用进程使用了某些共享资源,但却不幸失控&lt;/li&gt;
&lt;li&gt;系统统带于某些服务,但该服务突然或无响应&lt;/li&gt;
&lt;li&gt;级联故障&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;人为失误&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果假定人是不可靠的,那么该如何保证系统的可靠性?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以最小出错的方式来设计系统.&lt;/li&gt;
&lt;li&gt;想办法分离最容易出错的地方,容易引发故障的接口.&lt;/li&gt;
&lt;li&gt;充分的测试&lt;/li&gt;
&lt;li&gt;当出现人为失误时,提供快速的恢复机制以尽量减少故障影响&lt;/li&gt;
&lt;li&gt;设置详细而清晰的监控子系统&lt;/li&gt;
&lt;li&gt;推行管理流程并加以培训.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;可靠性的重要性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可扩展性&lt;/p&gt;
&lt;p&gt;随着规模的增长，例如数据量、流量或复杂性，系统应以合理的方式来匹配这种增长。可扩展性是描述系统应对负载增加能力的术语。它并不是衡量一个系统的一维指标，谈论“x是可扩展的”或“y不扩展”没有太大意义。相反，讨论可扩展性通常要考虑这类问题：“如果系统以某种方式增长，我们应对增长的措施有哪些”，“我们该如何添加计算资源来处理额外的负载”。&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;描述负载&lt;/p&gt;
&lt;p&gt;负载可以用称为负载参数的若干数字来描述，参数的最佳选择取决于系统的体系结构。如Web服务器的每秒请示处理次数，数据库中定稿的比例等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;描述性能&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;延迟和响应时间&lt;/p&gt;
&lt;p&gt;延迟和响应时间容易混淆使用，通常响应时间是客户端看到的：除了处理请示时间外还包括来回网络延迟和各种排除延迟。延迟是请示花费在处理上的时间。有时，即使所有请示都相同，也会由于其他变量因素而引入一些延迟拉动，这些因素包括上下文切换和进程调度、网络数据包丢失和TCP重传、垃圾回收暂停、缺页中断和磁盘IO,甚至服务器机架的机械振动等。我们经常考察的是服务请示的平均响应时间，然后如果想知道更典型的响应时间，平均值并不是合适的指标，因为它掩盖了一些信息，无法告诉有多少用户实际经历了多少延迟。因此最好使用百分位数(percentiles)。如果已经搜集到了响应时间信息，将其从最快到最慢排序，中位数(median)就是列表中间的响应时间。中位数指标非常适合描述多少用户需要等待多长时间，通常缩写为p50。为了弄清楚异常值有多糟糕，需要关注更大的百分位数，如觉的p95, p99和p999。采用较高的响应时间百分位数很重要，因为它们直接影响用户的总体服务体验。百分位数通常用于描述、定义服务质量目标（Service Level Objectives, SLO）和服务质量协议（Service Level Agreements, SLA），这些是规定服务预期质量和可用性的合同。排队延迟往往在高百分数响应时间中影响很大。由于服务器并行处理的请示有限，正在处理的少数请示可能会阻挡后续请示，这种情况有时被称为队头阻塞。即使后续请示可能处理很简单，但它阻塞在等待先前请示的完成，客户端会观察到极慢的响应时间。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;应对负载增加的方法&lt;/p&gt;
&lt;p&gt;把无状态服务分布然后扩展臻多台机器相对比较容易，而有状态服务从单个节点扩展到分布式多机环境的复杂性会大大增加。出于这个原因，址到最近通常的做法一直是，将数据库运行在一个节点上（采用垂直扩展策略），直到高扩展性或高可用性的要求近使不得不做水平扩展。超大规模的系统往往针对特定应用而高度定制，很验证有一种通用的架构。背后取舍因素包括数据读取量、写入量、待存储的数据量、的复杂程度、响应时间要求、访问模式等，或者更多的是上述所有因素的叠加，再加上其他更复杂的问题。对于特定应用来说，扩展能力好的架构通常会做出某些假设，然后有针对性地优化设计，如哪些操作是最频繁的，哪 些负载是少数情况。可扩展架构通常都是从通用模块逐步构建而来， 背后往往有规律可循。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可维护性&lt;/p&gt;
&lt;p&gt;随着时间的失衡，许多新的人员参与到系统开发和运维，以维护现有功能或甜酸新场景等，可维护性包括维护与缺陷修复，监控系统来保持正常运行、故障排查、适配新平台、搭配新场景、技术担风险的完善以及增加新功能等。&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我们需要特别关注软件系统的三个设计原则&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可运维性&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>csapp</title>
      <link>https://stoneepigraph.github.io/posts/csapp/</link>
      <pubDate>Wed, 04 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>https://stoneepigraph.github.io/posts/csapp/</guid>
      <description>&lt;h2&gt;计算机系统漫游&lt;/h2&gt;


&lt;h3&gt;信息就是位+上下文&lt;/h3&gt;


&lt;h3&gt;程序被其他程序翻译成不同的格式&lt;/h3&gt;

&lt;p&gt;hello程序的生命周期是从一个高级C语言开始的，因为这种形式能够被人读懂。然而，为了在系统上运行hello.c程序，每条C诗句都必须被其他程序转化为一系列的低级机器语言指令。然后这些指令按照一种称为可执行目标程序的格式打好包，并以二进制磁盘文件的形式存放起来。目标程序也称为可执行目标文件。&lt;/p&gt;

&lt;h3&gt;了解编译系统如何工作是大有益处的&lt;/h3&gt;


&lt;h4&gt;优化程序性能&lt;/h4&gt;


&lt;h4&gt;理解链接时出现的错误&lt;/h4&gt;


&lt;h4&gt;避免安全漏洞&lt;/h4&gt;


&lt;h3&gt;处理器读并解释储存在中的指令&lt;/h3&gt;


&lt;h4&gt;系统的硬件组成&lt;/h4&gt;

&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;总线&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;I/O设备&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;主存&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;处理器&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;加载&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;存储&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;操作&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;跳转&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;高速缓存至关重要&lt;/h3&gt;


&lt;h3&gt;存储设备形成层次结构&lt;/h3&gt;

&lt;p&gt;在处理器和一个较大较慢的设备（例如主存）之间插入一个更小更快的存储设备（例如高速红艳艳）的想法已经成为一个普通的观念。实际上，每个计算机系统中的存储设备都被组织成了一个存储器层次结构，在这个层次结构中， 从上至下，设备的访问速度起来越慢，容量越来越大，并且每字节的造价也越来越便宜。&lt;/p&gt;

&lt;h3&gt;操作系统管理硬件&lt;/h3&gt;

&lt;p&gt;所有应用程序对硬件的操作深度都必须通过操作系统。&lt;/p&gt;

&lt;h4&gt;操作系统有两个基本功能&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;防止硬件被失控的应用程序滥用&lt;/li&gt;
&lt;li&gt;向应用程序提供简单一致的机制来控制复杂而又通常大不相同的低级硬件设备。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;操作系统通过几个基本的抽象概念来实现这两个功能&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;进程进程则是对处理器、主存和I/O设备的抽象表示。&lt;/li&gt;
&lt;li&gt;虚拟内存虚拟内存是对主存和磁盘I/O设备的抽象表示&lt;/li&gt;
&lt;li&gt;文件文件是对I/O设备的抽象表示&lt;/li&gt;
&lt;/ol&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;进程&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;线程&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;虚拟内存&lt;/p&gt;
&lt;p&gt;虚拟内存是一个抽象概念，它为每个进程提供了一个假象，即每个进程都在独占地使用主存。每个进程看到的内存都是一致的，称为虚拟地址空间。在Linux中，地址空间最上面的区域是保留给操作系统中的代码和数据的，这对所有进程来说都是一样。地址空间的底部区域存放用户进程定义的代码和数据。注意，地址是从下往上增大的。从下往上依次是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;程序代码和数据。&lt;/li&gt;
&lt;li&gt;堆&lt;/li&gt;
&lt;li&gt;共享库&lt;/li&gt;
&lt;li&gt;栈&lt;/li&gt;
&lt;li&gt;内核虚拟内存&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;文件&lt;/p&gt;
&lt;p&gt;文件就是字节序列，每个I/O设备，包括磁盘、键盘、显示器，甚至网络，都可以看成是文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;系统之间利用网络通信&lt;/h3&gt;


&lt;h2&gt;程序结构和执行&lt;/h2&gt;


&lt;h3&gt;信息的表示和处理&lt;/h3&gt;


&lt;h4&gt;信息存储&lt;/h4&gt;

&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;十六进制表示法&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;字数据大小&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;寻址和字节顺序&lt;/p&gt;
&lt;p&gt;大端法小端法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;表示字符串&lt;/p&gt;
&lt;p&gt;C语言中字符串被编码为一个以null(其值为0)字符结尾的字符数组。每个字符都同某个标准编码来表示，最常见的是ASCII字符码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;表示代码&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;布尔代数简介&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何设计程序</title>
      <link>https://stoneepigraph.github.io/posts/book/common/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Wed, 04 Sep 2024 16:35:00 +0800</pubDate>
      
      <guid>https://stoneepigraph.github.io/posts/book/common/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E7%A8%8B%E5%BA%8F/</guid>
      <description>&lt;h2&gt;如何设计程序&lt;/h2&gt;


&lt;h3&gt;Base&lt;/h3&gt;


&lt;h4&gt;基本程序设计步骤&lt;/h4&gt;

&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;六个基本的程序设计步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题分析和数据定义&lt;/li&gt;
&lt;li&gt;合约,用途说明与结果的描述,函数头部&lt;/li&gt;
&lt;li&gt;例子&lt;/li&gt;
&lt;li&gt;函数模板&lt;/li&gt;
&lt;li&gt;函数定义&lt;/li&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;六个步骤产生定义明确的中间结果&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题数据类型描述&lt;/li&gt;
&lt;li&gt;程序行为的非形式描述&lt;/li&gt;
&lt;li&gt;说明程序行为的例子&lt;/li&gt;
&lt;li&gt;开发程序的模板或视图&lt;/li&gt;
&lt;li&gt;把模板转换成完整的定义&lt;/li&gt;
&lt;li&gt;通过测试发现错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;要正确的设计程序需要做到&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分析通常使用文字表述的问题&lt;/li&gt;
&lt;li&gt;在抽象表达问题实质的同时使用例子进行说明&lt;/li&gt;
&lt;li&gt;用精确的语言阐明所表述的语句和注释&lt;/li&gt;
&lt;li&gt;通过检查,测试对上述活动进行评价和修改&lt;/li&gt;
&lt;li&gt;关注细节&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;简单数据的处理&lt;/h3&gt;


&lt;h4&gt;学生,教师和计算机&lt;/h4&gt;

&lt;p&gt;程序只是计算速度非常快的学生,不过程序并不能理解自然语言,所以我们需要学会一门计算机语言将自然语言翻译给计算机.但程序设计需要耐心和专心,保能关注每个微小的细节,并严格规划和对规划忠诚,才能避免错误.&lt;/p&gt;

&lt;h4&gt;数,表达式和简单程序&lt;/h4&gt;

&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数和算术运算&lt;/p&gt;
&lt;p&gt;讲述了数和Scheme的一些基本知识&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;变量和程序&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;字处理问题&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;错误&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设计程序&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设计程序至少需要如下4个步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;理解程序的目的程序设计的目标是创建一个接收输入并产生结果的机制.因此在开发程序时应该给每一个程序一个有意义的名字,并且说明输入数据和所产生的数据的类型,这称为程序的合约.&lt;/li&gt;
&lt;li&gt;构造并标注例子构造一个例子,并将其写入注释&lt;/li&gt;
&lt;li&gt;程序体写出程序&lt;/li&gt;
&lt;li&gt;测试检查程序计算所得的结果与预期数值是否相符.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;设计诀窍并不能解决程序设计过程中所遇到的所有问题,它提供的是完成程序设计过程中不可避免的步骤的指导.&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;领域知识&lt;/p&gt;
&lt;p&gt;阐明程序体通常需要与问题相关的知识,这种形式的知识称为领域知识.它可能来自简单或复杂的数学,或来自非数学学科.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;程序就是函数加上变量定义&lt;/h4&gt;

&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;函数的复合&lt;/p&gt;
&lt;p&gt;辅助函数原则: 对问题表述中所提到的或在进行实例计算中所发现的每种依赖关系都使用一个辅助函数进行明确表达.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;变量定义&lt;/p&gt;
&lt;p&gt;如果一个数值在程序中多次出现,应该使用变量定义给它一个名字.变量定义将一个名字与一个值相关联.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;条件表达式和函数&lt;/h4&gt;

&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;布尔类型和关系&lt;/p&gt;
&lt;p&gt;复合条件: and or not&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;函数和测试条件&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;条件和条件函数&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>代码之外的生存指南</title>
      <link>https://stoneepigraph.github.io/posts/%E4%BB%A3%E7%A0%81%E4%B9%8B%E5%A4%96%E7%9A%84%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/</link>
      <pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://stoneepigraph.github.io/posts/%E4%BB%A3%E7%A0%81%E4%B9%8B%E5%A4%96%E7%9A%84%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;h3 id=&#34;为何这本书与你先前读过的任何书籍都迥然不同&#34; class=&#34;header-anchor-wrapper&#34;&gt;为何这本书与你先前读过的任何书籍都迥然不同
  &lt;a href=&#34;#%e4%b8%ba%e4%bd%95%e8%bf%99%e6%9c%ac%e4%b9%a6%e4%b8%8e%e4%bd%a0%e5%85%88%e5%89%8d%e8%af%bb%e8%bf%87%e7%9a%84%e4%bb%bb%e4%bd%95%e4%b9%a6%e7%b1%8d%e9%83%bd%e8%bf%a5%e7%84%b6%e4%b8%8d%e5%90%8c&#34; class=&#34;header-anchor-link&#34;&gt;
    &lt;svg width=&#34;16px&#34; height=&#34;16px&#34; viewBox=&#34;0 0 24 24&#34;&gt;
&lt;svg
    xmlns=&#34;http://www.w3.org/2000/svg&#34;
    width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34;
    stroke=&#34;currentColor&#34; stroke-width=&#34;2&#34; stroke-linecap=&#34;round&#34;
    stroke-linejoin=&#34;round&#34;&gt;
    &lt;line x1=&#34;4&#34; y1=&#34;9&#34; x2=&#34;20&#34; y2=&#34;9&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;4&#34; y1=&#34;15&#34; x2=&#34;20&#34; y2=&#34;15&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;10&#34; y1=&#34;3&#34; x2=&#34;8&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;16&#34; y1=&#34;3&#34; x2=&#34;14&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;
&lt;/svg&gt;

&lt;/svg&gt;
  &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;讲述如何成为一名优秀的软件开发人员的书，优秀开发人员指的是那些能够把控自己的职业生涯，达成目标，享受生活的人。本书并不再讨论你能做什么，而是讨论你自己。关乎你的职业生涯，你的生活，你的身体，你的思想及你的灵魂。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;职业生涯：学习如何主动管理自己的职业生涯，从而达到自己追寻的结果。&lt;/li&gt;
&lt;li&gt;自我营销：学习如何推销自己。
&lt;ul&gt;
&lt;li&gt;如何打造个人品牌，如何打造一个成功的博客，如何通过演讲，教学，著书立说的方式让你扬名立万。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;学习：学习如何学习，学习如何自觉&lt;/li&gt;
&lt;li&gt;生产力：关于如何让工作更加富有成效的&lt;/li&gt;
&lt;li&gt;理财：学习如何有效地管理你赚到的财。&lt;/li&gt;
&lt;li&gt;健身：&lt;/li&gt;
&lt;li&gt;精神：&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;职业&#34; class=&#34;header-anchor-wrapper&#34;&gt;职业
  &lt;a href=&#34;#%e8%81%8c%e4%b8%9a&#34; class=&#34;header-anchor-link&#34;&gt;
    &lt;svg width=&#34;16px&#34; height=&#34;16px&#34; viewBox=&#34;0 0 24 24&#34;&gt;
&lt;svg
    xmlns=&#34;http://www.w3.org/2000/svg&#34;
    width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34;
    stroke=&#34;currentColor&#34; stroke-width=&#34;2&#34; stroke-linecap=&#34;round&#34;
    stroke-linejoin=&#34;round&#34;&gt;
    &lt;line x1=&#34;4&#34; y1=&#34;9&#34; x2=&#34;20&#34; y2=&#34;9&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;4&#34; y1=&#34;15&#34; x2=&#34;20&#34; y2=&#34;15&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;10&#34; y1=&#34;3&#34; x2=&#34;8&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;16&#34; y1=&#34;3&#34; x2=&#34;14&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;
&lt;/svg&gt;

&lt;/svg&gt;
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;你所能犯的最大错误就是相信自己是在为别人工作。这样一来你对工作的安全感已然尽失。职业发展的驱动力一定是来自个体本身。记住：工作是属于公司的，而职业生涯却是属于你自己的。体验决策过程：你要决定自己想要从软件开发这个职业中获得什么，以及如何去获得。&lt;/p&gt;

&lt;h3 id=&#34;从非同凡响开始-绝不要做其他人都在做的事&#34; class=&#34;header-anchor-wrapper&#34;&gt;从非同凡响开始：绝不要做其他人都在做的事
  &lt;a href=&#34;#%e4%bb%8e%e9%9d%9e%e5%90%8c%e5%87%a1%e5%93%8d%e5%bc%80%e5%a7%8b-%e7%bb%9d%e4%b8%8d%e8%a6%81%e5%81%9a%e5%85%b6%e4%bb%96%e4%ba%ba%e9%83%bd%e5%9c%a8%e5%81%9a%e7%9a%84%e4%ba%8b&#34; class=&#34;header-anchor-link&#34;&gt;
    &lt;svg width=&#34;16px&#34; height=&#34;16px&#34; viewBox=&#34;0 0 24 24&#34;&gt;
&lt;svg
    xmlns=&#34;http://www.w3.org/2000/svg&#34;
    width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34;
    stroke=&#34;currentColor&#34; stroke-width=&#34;2&#34; stroke-linecap=&#34;round&#34;
    stroke-linejoin=&#34;round&#34;&gt;
    &lt;line x1=&#34;4&#34; y1=&#34;9&#34; x2=&#34;20&#34; y2=&#34;9&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;4&#34; y1=&#34;15&#34; x2=&#34;20&#34; y2=&#34;15&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;10&#34; y1=&#34;3&#34; x2=&#34;8&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;16&#34; y1=&#34;3&#34; x2=&#34;14&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;
&lt;/svg&gt;

&lt;/svg&gt;
  &lt;/a&gt;
&lt;/h3&gt;


&lt;h4 id=&#34;拥有商业心态&#34; class=&#34;header-anchor-wrapper&#34;&gt;拥有商业心态
  &lt;a href=&#34;#%e6%8b%a5%e6%9c%89%e5%95%86%e4%b8%9a%e5%bf%83%e6%80%81&#34; class=&#34;header-anchor-link&#34;&gt;
    &lt;svg width=&#34;16px&#34; height=&#34;16px&#34; viewBox=&#34;0 0 24 24&#34;&gt;
&lt;svg
    xmlns=&#34;http://www.w3.org/2000/svg&#34;
    width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34;
    stroke=&#34;currentColor&#34; stroke-width=&#34;2&#34; stroke-linecap=&#34;round&#34;
    stroke-linejoin=&#34;round&#34;&gt;
    &lt;line x1=&#34;4&#34; y1=&#34;9&#34; x2=&#34;20&#34; y2=&#34;9&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;4&#34; y1=&#34;15&#34; x2=&#34;20&#34; y2=&#34;15&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;10&#34; y1=&#34;3&#34; x2=&#34;8&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;16&#34; y1=&#34;3&#34; x2=&#34;14&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;
&lt;/svg&gt;

&lt;/svg&gt;
  &lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;因为只有你开始把自己当作一个企业去思考时，你才能开始做出良好的商业决策。尽管在你的职业生涯的某个特定时间段里，你可能确实是在为某家公司打工，但是千万不要让那个特定的角色固化了你和你的整个职业生涯。我们需要把雇主当作是自己的软件开发企业的一个客户。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>重构2</title>
      <link>https://stoneepigraph.github.io/posts/%E9%87%8D%E6%9E%842/</link>
      <pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://stoneepigraph.github.io/posts/%E9%87%8D%E6%9E%842/</guid>
      <description>&lt;h2 id=&#34;开始&#34; class=&#34;header-anchor-wrapper&#34;&gt;开始
  &lt;a href=&#34;#%e5%bc%80%e5%a7%8b&#34; class=&#34;header-anchor-link&#34;&gt;
    &lt;svg width=&#34;16px&#34; height=&#34;16px&#34; viewBox=&#34;0 0 24 24&#34;&gt;
&lt;svg
    xmlns=&#34;http://www.w3.org/2000/svg&#34;
    width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34;
    stroke=&#34;currentColor&#34; stroke-width=&#34;2&#34; stroke-linecap=&#34;round&#34;
    stroke-linejoin=&#34;round&#34;&gt;
    &lt;line x1=&#34;4&#34; y1=&#34;9&#34; x2=&#34;20&#34; y2=&#34;9&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;4&#34; y1=&#34;15&#34; x2=&#34;20&#34; y2=&#34;15&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;10&#34; y1=&#34;3&#34; x2=&#34;8&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;16&#34; y1=&#34;3&#34; x2=&#34;14&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;
&lt;/svg&gt;

&lt;/svg&gt;
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;本章重构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将原函数分解成一组嵌套的函数&lt;/li&gt;
&lt;li&gt;分离计算逻辑与输出格式化逻辑&lt;/li&gt;
&lt;li&gt;为计算器引入多态性来处理计算逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好的代码的检验标准就是人们是否能构轻易地修改它注： 小步累积&lt;/p&gt;

&lt;h2 id=&#34;重构的原则&#34; class=&#34;header-anchor-wrapper&#34;&gt;重构的原则
  &lt;a href=&#34;#%e9%87%8d%e6%9e%84%e7%9a%84%e5%8e%9f%e5%88%99&#34; class=&#34;header-anchor-link&#34;&gt;
    &lt;svg width=&#34;16px&#34; height=&#34;16px&#34; viewBox=&#34;0 0 24 24&#34;&gt;
&lt;svg
    xmlns=&#34;http://www.w3.org/2000/svg&#34;
    width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34;
    stroke=&#34;currentColor&#34; stroke-width=&#34;2&#34; stroke-linecap=&#34;round&#34;
    stroke-linejoin=&#34;round&#34;&gt;
    &lt;line x1=&#34;4&#34; y1=&#34;9&#34; x2=&#34;20&#34; y2=&#34;9&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;4&#34; y1=&#34;15&#34; x2=&#34;20&#34; y2=&#34;15&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;10&#34; y1=&#34;3&#34; x2=&#34;8&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;16&#34; y1=&#34;3&#34; x2=&#34;14&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;
&lt;/svg&gt;

&lt;/svg&gt;
  &lt;/a&gt;
&lt;/h2&gt;


&lt;h3 id=&#34;何谓重构&#34; class=&#34;header-anchor-wrapper&#34;&gt;何谓重构
  &lt;a href=&#34;#%e4%bd%95%e8%b0%93%e9%87%8d%e6%9e%84&#34; class=&#34;header-anchor-link&#34;&gt;
    &lt;svg width=&#34;16px&#34; height=&#34;16px&#34; viewBox=&#34;0 0 24 24&#34;&gt;
&lt;svg
    xmlns=&#34;http://www.w3.org/2000/svg&#34;
    width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34;
    stroke=&#34;currentColor&#34; stroke-width=&#34;2&#34; stroke-linecap=&#34;round&#34;
    stroke-linejoin=&#34;round&#34;&gt;
    &lt;line x1=&#34;4&#34; y1=&#34;9&#34; x2=&#34;20&#34; y2=&#34;9&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;4&#34; y1=&#34;15&#34; x2=&#34;20&#34; y2=&#34;15&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;10&#34; y1=&#34;3&#34; x2=&#34;8&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;16&#34; y1=&#34;3&#34; x2=&#34;14&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;
&lt;/svg&gt;

&lt;/svg&gt;
  &lt;/a&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;名: 对软件内部结构的一种调整,目的是在不改变软件可观察行为的前提下,提高其可理解性,降低其修改成本.&lt;/li&gt;
&lt;li&gt;动: 使用一系列重构手法,在不改变软件可观察行为的前提下,高速其结构.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;重构时不添加新功能-添加新功能时不重构-dot&#34; class=&#34;header-anchor-wrapper&#34;&gt;重构时不添加新功能,添加新功能时不重构.
  &lt;a href=&#34;#%e9%87%8d%e6%9e%84%e6%97%b6%e4%b8%8d%e6%b7%bb%e5%8a%a0%e6%96%b0%e5%8a%9f%e8%83%bd-%e6%b7%bb%e5%8a%a0%e6%96%b0%e5%8a%9f%e8%83%bd%e6%97%b6%e4%b8%8d%e9%87%8d%e6%9e%84-dot&#34; class=&#34;header-anchor-link&#34;&gt;
    &lt;svg width=&#34;16px&#34; height=&#34;16px&#34; viewBox=&#34;0 0 24 24&#34;&gt;
&lt;svg
    xmlns=&#34;http://www.w3.org/2000/svg&#34;
    width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34;
    stroke=&#34;currentColor&#34; stroke-width=&#34;2&#34; stroke-linecap=&#34;round&#34;
    stroke-linejoin=&#34;round&#34;&gt;
    &lt;line x1=&#34;4&#34; y1=&#34;9&#34; x2=&#34;20&#34; y2=&#34;9&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;4&#34; y1=&#34;15&#34; x2=&#34;20&#34; y2=&#34;15&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;10&#34; y1=&#34;3&#34; x2=&#34;8&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;16&#34; y1=&#34;3&#34; x2=&#34;14&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;
&lt;/svg&gt;

&lt;/svg&gt;
  &lt;/a&gt;
&lt;/h3&gt;


&lt;h3 id=&#34;为何重构&#34; class=&#34;header-anchor-wrapper&#34;&gt;为何重构
  &lt;a href=&#34;#%e4%b8%ba%e4%bd%95%e9%87%8d%e6%9e%84&#34; class=&#34;header-anchor-link&#34;&gt;
    &lt;svg width=&#34;16px&#34; height=&#34;16px&#34; viewBox=&#34;0 0 24 24&#34;&gt;
&lt;svg
    xmlns=&#34;http://www.w3.org/2000/svg&#34;
    width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34;
    stroke=&#34;currentColor&#34; stroke-width=&#34;2&#34; stroke-linecap=&#34;round&#34;
    stroke-linejoin=&#34;round&#34;&gt;
    &lt;line x1=&#34;4&#34; y1=&#34;9&#34; x2=&#34;20&#34; y2=&#34;9&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;4&#34; y1=&#34;15&#34; x2=&#34;20&#34; y2=&#34;15&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;10&#34; y1=&#34;3&#34; x2=&#34;8&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;16&#34; y1=&#34;3&#34; x2=&#34;14&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;
&lt;/svg&gt;

&lt;/svg&gt;
  &lt;/a&gt;
&lt;/h3&gt;


&lt;h4 id=&#34;改进软件的设计&#34; class=&#34;header-anchor-wrapper&#34;&gt;改进软件的设计
  &lt;a href=&#34;#%e6%94%b9%e8%bf%9b%e8%bd%af%e4%bb%b6%e7%9a%84%e8%ae%be%e8%ae%a1&#34; class=&#34;header-anchor-link&#34;&gt;
    &lt;svg width=&#34;16px&#34; height=&#34;16px&#34; viewBox=&#34;0 0 24 24&#34;&gt;
&lt;svg
    xmlns=&#34;http://www.w3.org/2000/svg&#34;
    width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34;
    stroke=&#34;currentColor&#34; stroke-width=&#34;2&#34; stroke-linecap=&#34;round&#34;
    stroke-linejoin=&#34;round&#34;&gt;
    &lt;line x1=&#34;4&#34; y1=&#34;9&#34; x2=&#34;20&#34; y2=&#34;9&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;4&#34; y1=&#34;15&#34; x2=&#34;20&#34; y2=&#34;15&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;10&#34; y1=&#34;3&#34; x2=&#34;8&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;16&#34; y1=&#34;3&#34; x2=&#34;14&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;
&lt;/svg&gt;

&lt;/svg&gt;
  &lt;/a&gt;
&lt;/h4&gt;


&lt;h4 id=&#34;使软件更容易理解&#34; class=&#34;header-anchor-wrapper&#34;&gt;使软件更容易理解
  &lt;a href=&#34;#%e4%bd%bf%e8%bd%af%e4%bb%b6%e6%9b%b4%e5%ae%b9%e6%98%93%e7%90%86%e8%a7%a3&#34; class=&#34;header-anchor-link&#34;&gt;
    &lt;svg width=&#34;16px&#34; height=&#34;16px&#34; viewBox=&#34;0 0 24 24&#34;&gt;
&lt;svg
    xmlns=&#34;http://www.w3.org/2000/svg&#34;
    width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34;
    stroke=&#34;currentColor&#34; stroke-width=&#34;2&#34; stroke-linecap=&#34;round&#34;
    stroke-linejoin=&#34;round&#34;&gt;
    &lt;line x1=&#34;4&#34; y1=&#34;9&#34; x2=&#34;20&#34; y2=&#34;9&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;4&#34; y1=&#34;15&#34; x2=&#34;20&#34; y2=&#34;15&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;10&#34; y1=&#34;3&#34; x2=&#34;8&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;16&#34; y1=&#34;3&#34; x2=&#34;14&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;
&lt;/svg&gt;

&lt;/svg&gt;
  &lt;/a&gt;
&lt;/h4&gt;


&lt;h4 id=&#34;帮助找到bug&#34; class=&#34;header-anchor-wrapper&#34;&gt;帮助找到BUG
  &lt;a href=&#34;#%e5%b8%ae%e5%8a%a9%e6%89%be%e5%88%b0bug&#34; class=&#34;header-anchor-link&#34;&gt;
    &lt;svg width=&#34;16px&#34; height=&#34;16px&#34; viewBox=&#34;0 0 24 24&#34;&gt;
&lt;svg
    xmlns=&#34;http://www.w3.org/2000/svg&#34;
    width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34;
    stroke=&#34;currentColor&#34; stroke-width=&#34;2&#34; stroke-linecap=&#34;round&#34;
    stroke-linejoin=&#34;round&#34;&gt;
    &lt;line x1=&#34;4&#34; y1=&#34;9&#34; x2=&#34;20&#34; y2=&#34;9&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;4&#34; y1=&#34;15&#34; x2=&#34;20&#34; y2=&#34;15&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;10&#34; y1=&#34;3&#34; x2=&#34;8&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;16&#34; y1=&#34;3&#34; x2=&#34;14&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;
&lt;/svg&gt;

&lt;/svg&gt;
  &lt;/a&gt;
&lt;/h4&gt;


&lt;h4 id=&#34;提高编程速度&#34; class=&#34;header-anchor-wrapper&#34;&gt;提高编程速度
  &lt;a href=&#34;#%e6%8f%90%e9%ab%98%e7%bc%96%e7%a8%8b%e9%80%9f%e5%ba%a6&#34; class=&#34;header-anchor-link&#34;&gt;
    &lt;svg width=&#34;16px&#34; height=&#34;16px&#34; viewBox=&#34;0 0 24 24&#34;&gt;
&lt;svg
    xmlns=&#34;http://www.w3.org/2000/svg&#34;
    width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34;
    stroke=&#34;currentColor&#34; stroke-width=&#34;2&#34; stroke-linecap=&#34;round&#34;
    stroke-linejoin=&#34;round&#34;&gt;
    &lt;line x1=&#34;4&#34; y1=&#34;9&#34; x2=&#34;20&#34; y2=&#34;9&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;4&#34; y1=&#34;15&#34; x2=&#34;20&#34; y2=&#34;15&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;10&#34; y1=&#34;3&#34; x2=&#34;8&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;16&#34; y1=&#34;3&#34; x2=&#34;14&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;
&lt;/svg&gt;

&lt;/svg&gt;
  &lt;/a&gt;
&lt;/h4&gt;


&lt;h3 id=&#34;何时重构&#34; class=&#34;header-anchor-wrapper&#34;&gt;何时重构
  &lt;a href=&#34;#%e4%bd%95%e6%97%b6%e9%87%8d%e6%9e%84&#34; class=&#34;header-anchor-link&#34;&gt;
    &lt;svg width=&#34;16px&#34; height=&#34;16px&#34; viewBox=&#34;0 0 24 24&#34;&gt;
&lt;svg
    xmlns=&#34;http://www.w3.org/2000/svg&#34;
    width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34;
    stroke=&#34;currentColor&#34; stroke-width=&#34;2&#34; stroke-linecap=&#34;round&#34;
    stroke-linejoin=&#34;round&#34;&gt;
    &lt;line x1=&#34;4&#34; y1=&#34;9&#34; x2=&#34;20&#34; y2=&#34;9&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;4&#34; y1=&#34;15&#34; x2=&#34;20&#34; y2=&#34;15&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;10&#34; y1=&#34;3&#34; x2=&#34;8&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;16&#34; y1=&#34;3&#34; x2=&#34;14&#34; y2=&#34;21&#34;&gt;&lt;/line&gt;
&lt;/svg&gt;

&lt;/svg&gt;
  &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;事不过三, 三则重构&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>